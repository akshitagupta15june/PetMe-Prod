generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User  {
  id            String         @id @default(uuid())
  first_name    String
  last_name     String?
  email         String         @unique
  password      String?
  address       String          @default("")
  google_id     String?
  city          String          @default("")
  auth_provider AUTH_PROVIDER?
  state         String          @default("")
  country       String          @default("")
  zip_code      String          @default("")
  phone_number  String           @default("")
  role          String[]          
  Donate_Pets   Donate_Pets[]
  SOS_Pets      SOS_Pets[]
  verfied_flag  Boolean         @default(false)
  Blog          Blog[]
}

// model Donate_User {
//   id           Int           @id @default(uuid())
//   first_name   String
//   last_name    String?
//   email        String        @unique
//   address      String
//   city         String
//   state        String
//   country      String
//   zip_code     String
//   phone_number String
//   Donate_Pets  Donate_Pets[] 
// }

// model Volunteer_User {
//   id           Int     @id @default(uuid())
//   first_name   String
//   last_name    String?
//   email        String  @unique
//   address      String
//   city         String
//   state        String
//   country      String
//   zip_code     String
//   phone_number String
// }

model Donate_Pets {
  donate_user_id String
  pet_id         String
  id             String @id @default(uuid())
  user           User   @relation(fields: [donate_user_id], references: [id])
  pet            Pets   @relation(fields: [pet_id], references: [id])
}

model Pets {
  id           String        @id @default(uuid())
  name         String
  color_id     String
  pet_img      String
  breed_id     String
  type_id      String
  gender       String        // New field for gender
  age          String        // New field for age
  size         String        // New field for size
  location     String        // New field for location
  adoption_fee String        // New field for adoption fee
  Donate_Pets  Donate_Pets[]
  pet_breed    Pet_Breed     @relation(fields: [breed_id], references: [id])
  pet_color    Pet_Color     @relation(fields: [color_id], references: [id])
  pet_type     Pet_Type      @relation(fields: [type_id], references: [id])
}


model Pet_Type {
  id   String @id @default(uuid())
  name String
  Pets Pets[]
  SOS_Pets SOS_Pets[]
}

model Pet_Breed {
  id   String @id @default(uuid())
  name String
  Pets Pets[]
}

model Pet_Color {
  id   String @id @default(uuid())
  name String
  Pets Pets[]
}

model Support_User {
  id           String  @id @default(uuid())
  first_name   String
  last_name    String?
  email        String  @unique
  address      String
  city         String
  state        String
  country      String
  zip_code     String
  phone_number String
}

enum AUTH_PROVIDER {
  GOOGLE
}

model Blog {
  id        String    @id @default(uuid())
  title     String
  content   String
  published DateTime  @default(now())
  edited    DateTime?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
}

model SOS_Pets {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [report_user_id], references: [id])
  report_user_id  String
  landmark        String
  type_id         String
  Pet_Type        Pet_Type  @relation(fields: [type_id], references: [id])
  Pet_Condition   String
  Additional_Desc String
// Live_location   Object 
}

model News {
  id        String    @id @default(uuid())
  user      String
  imageSrc  String
  tags      String[]
  title     String
  content   String
  publishedAt DateTime  @default(now())
}
